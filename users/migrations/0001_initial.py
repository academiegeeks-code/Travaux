# Generated by Django 5.2.5 on 2025-08-20 02:09

import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('phone_number', models.CharField(blank=True, help_text='Numéro de téléphone', max_length=15, validators=[django.core.validators.RegexValidator('^\\+?\\d{9,15}$', 'Format de téléphone invalide. Ex: +22670000000')])),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('supervisor', 'Maitre de suivi'), ('intern', 'Stagiaire'), ('visitor', 'Visiteur simple')], default='visitor', max_length=20)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('password_expiry', models.DateTimeField(blank=True, help_text="Date d'expiration du mot de passe", null=True)),
                ('must_change_password', models.BooleanField(default=False)),
                ('activation_token', models.UUIDField(blank=True, null=True)),
                ('activation_token_expiry', models.DateTimeField(blank=True, null=True)),
                ('password_reset_token', models.UUIDField(blank=True, null=True, unique=True)),
                ('password_reset_token_expiry', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', users.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, help_text='Adresse', max_length=255)),
                ('profession', models.CharField(blank=True, help_text='Profession ou spécialité (supervisor)', max_length=100)),
                ('specialty', models.CharField(blank=True, help_text="Spécialité dans un domaine d'étude", max_length=100)),
                ('university_teaches', models.CharField(blank=True, help_text='Université où il enseigne', max_length=100)),
                ('filiere', models.CharField(blank=True, help_text='Filière (intern)', max_length=100)),
                ('domain_study', models.CharField(blank=True, help_text="Domaine d'étude", max_length=100)),
                ('university_studies', models.CharField(blank=True, help_text='Université où il étudie', max_length=100)),
                ('age', models.PositiveIntegerField(blank=True, help_text='Âge', null=True, validators=[django.core.validators.MinValueValidator(16), django.core.validators.MaxValueValidator(100)])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Suggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_suggested', models.CharField(help_text='Domaine de stage suggéré', max_length=100)),
                ('message', models.TextField(blank=True, help_text='Suggestions supplémentaires')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_user_role_36d76d_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('email'), name='uniq_user_email_ci'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('is_staff', True), ('role', 'admin')), models.Q(('role', 'admin'), _negated=True), _connector='OR'), name='admin_requires_staff'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['university_studies'], name='users_profi_univers_9feecf_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['domain_study'], name='users_profi_domain__17a1cb_idx'),
        ),
        migrations.AddIndex(
            model_name='suggestion',
            index=models.Index(fields=['created_at'], name='users_sugge_created_d24499_idx'),
        ),
    ]
