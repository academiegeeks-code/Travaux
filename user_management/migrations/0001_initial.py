# Generated by Django 5.2.5 on 2025-09-05 00:47

import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import user_management.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, help_text='150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='last login IP')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='last activity')),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator('^\\+?\\d{9,15}$', 'Format de téléphone invalide.')], verbose_name='phone number')),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('supervisor', 'Maître de stage'), ('intern', 'Stagiaire'), ('visitor', 'Visiteur')], default='visitor', max_length=20, verbose_name='role')),
                ('status', models.CharField(choices=[('active', 'Actif'), ('inactive', 'Inactif'), ('suspended', 'Suspendu')], default='inactive', max_length=20, verbose_name='status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='deleted at')),
                ('password_expiry', models.DateTimeField(blank=True, null=True, verbose_name='password expiry')),
                ('must_change_password', models.BooleanField(default=False, verbose_name='must change password')),
                ('activation_token', models.UUIDField(blank=True, null=True, verbose_name='activation token')),
                ('activation_token_expiry', models.DateTimeField(blank=True, null=True, verbose_name='activation token expiry')),
                ('password_reset_token', models.UUIDField(blank=True, null=True, verbose_name='password reset token')),
                ('password_reset_token_expiry', models.DateTimeField(blank=True, null=True, verbose_name='password reset token expiry')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', user_management.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='address')),
                ('profession', models.CharField(blank=True, max_length=100, verbose_name='profession')),
                ('specialty', models.CharField(blank=True, max_length=100, verbose_name='specialty')),
                ('university_teaches', models.CharField(blank=True, max_length=100, verbose_name='teaching university')),
                ('filiere', models.CharField(blank=True, max_length=100, verbose_name='field of study')),
                ('domain_study', models.CharField(blank=True, max_length=100, verbose_name='domain of study')),
                ('university_studies', models.CharField(blank=True, max_length=100, verbose_name='studying university')),
                ('age', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(16), django.core.validators.MaxValueValidator(100)], verbose_name='age')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
            },
        ),
        migrations.CreateModel(
            name='Suggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('domain_suggested', models.CharField(max_length=100, verbose_name='suggested domain')),
                ('message', models.TextField(blank=True, verbose_name='message')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'suggestion',
                'verbose_name_plural': 'suggestions',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='user_manage_role_744ae7_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='user_manage_is_acti_2e8597_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['date_joined'], name='user_manage_date_jo_639fba_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role', 'is_active'], name='user_manage_role_c54a11_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('email'), name='uniq_user_email_ci'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('is_staff', True), ('role', 'admin')), models.Q(('role', 'admin'), _negated=True), _connector='OR'), name='admin_requires_staff'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['university_studies'], name='user_manage_univers_801f8e_idx'),
        ),
        migrations.AddIndex(
            model_name='profile',
            index=models.Index(fields=['domain_study'], name='user_manage_domain__7b4276_idx'),
        ),
        migrations.AddIndex(
            model_name='suggestion',
            index=models.Index(fields=['created_at'], name='user_manage_created_effef6_idx'),
        ),
    ]
